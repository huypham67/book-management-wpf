// <auto-generated />
using System;
using BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(BookManagementDbContext))]
    partial class BookManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Biography")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorName = "George Orwell",
                            Biography = "George Orwell was an English novelist, essayist, journalist and critic.",
                            DateOfBirth = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "British"
                        },
                        new
                        {
                            AuthorId = 2,
                            AuthorName = "J.K. Rowling",
                            Biography = "J.K. Rowling is a British author, best known for writing the Harry Potter fantasy series.",
                            DateOfBirth = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "British"
                        },
                        new
                        {
                            AuthorId = 3,
                            AuthorName = "Ernest Hemingway",
                            Biography = "Ernest Hemingway was an American novelist, short-story writer, and journalist.",
                            DateOfBirth = new DateTime(1899, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "American"
                        },
                        new
                        {
                            AuthorId = 4,
                            AuthorName = "Jane Austen",
                            Biography = "Jane Austen was an English novelist known primarily for her six major novels.",
                            DateOfBirth = new DateTime(1775, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "British"
                        },
                        new
                        {
                            AuthorId = 5,
                            AuthorName = "Mark Twain",
                            Biography = "Mark Twain was an American writer, humorist, entrepreneur, publisher, and lecturer.",
                            DateOfBirth = new DateTime(1835, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "American"
                        },
                        new
                        {
                            AuthorId = 6,
                            AuthorName = "Agatha Christie",
                            Biography = "Agatha Christie was an English writer known for her sixty-six detective novels.",
                            DateOfBirth = new DateTime(1890, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "British"
                        },
                        new
                        {
                            AuthorId = 7,
                            AuthorName = "Gabriel Garcia Marquez",
                            Biography = "Gabriel Garcia Marquez was a Colombian novelist, short-story writer, screenwriter, and journalist.",
                            DateOfBirth = new DateTime(1927, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Colombian"
                        },
                        new
                        {
                            AuthorId = 8,
                            AuthorName = "Leo Tolstoy",
                            Biography = "Leo Tolstoy was a Russian writer who is regarded as one of the greatest authors of all time.",
                            DateOfBirth = new DateTime(1828, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Russian"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("BookDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookCategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            BookCategoryId = 1,
                            BookDescription = "A dystopian social science fiction novel and cautionary tale, written by the English writer George Orwell.",
                            BookName = "1984",
                            Price = 19.99m,
                            PublicationDate = new DateTime(1949, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 1,
                            Quantity = 100
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            BookCategoryId = 4,
                            BookDescription = "A fantasy novel written by British author J.K. Rowling. It is the first book in the Harry Potter series.",
                            BookName = "Harry Potter and the Philosopher's Stone",
                            Price = 29.99m,
                            PublicationDate = new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 2,
                            Quantity = 200
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3,
                            BookCategoryId = 1,
                            BookDescription = "A short novel written by the American author Ernest Hemingway in 1951 in Cuba, and published in 1952.",
                            BookName = "The Old Man and the Sea",
                            Price = 15.99m,
                            PublicationDate = new DateTime(1952, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 3,
                            Quantity = 150
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4,
                            BookCategoryId = 7,
                            BookDescription = "A romantic novel of manners written by Jane Austen in 1813.",
                            BookName = "Pride and Prejudice",
                            Price = 12.99m,
                            PublicationDate = new DateTime(1813, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 4,
                            Quantity = 120
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5,
                            BookCategoryId = 1,
                            BookDescription = "A novel written by Mark Twain about a young boy growing up along the Mississippi River.",
                            BookName = "The Adventures of Tom Sawyer",
                            Price = 18.99m,
                            PublicationDate = new DateTime(1876, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 5,
                            Quantity = 130
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6,
                            BookCategoryId = 3,
                            BookDescription = "A detective novel by British author Agatha Christie featuring the Belgian detective Hercule Poirot.",
                            BookName = "Murder on the Orient Express",
                            Price = 22.99m,
                            PublicationDate = new DateTime(1934, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 6,
                            Quantity = 140
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 7,
                            BookCategoryId = 1,
                            BookDescription = "A landmark 1967 novel by Colombian author Gabriel Garcia Marquez that tells the multi-generational story of the Buendia family.",
                            BookName = "One Hundred Years of Solitude",
                            Price = 25.99m,
                            PublicationDate = new DateTime(1967, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 7,
                            Quantity = 160
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 8,
                            BookCategoryId = 1,
                            BookDescription = "A novel by the Russian author Leo Tolstoy, published from 1865 to 1869.",
                            BookName = "War and Peace",
                            Price = 30.99m,
                            PublicationDate = new DateTime(1869, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = 8,
                            Quantity = 170
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.BookCart", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookGenreType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookId");

                    b.ToTable("BookCarts");
                });

            modelBuilder.Entity("BusinessObjects.Models.BookCategory", b =>
                {
                    b.Property<int>("BookCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookCategoryId"));

                    b.Property<string>("BookGenreType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BookCategoryId");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            BookCategoryId = 1,
                            BookGenreType = "Fiction",
                            Description = "A genre of books that contains fictional stories."
                        },
                        new
                        {
                            BookCategoryId = 2,
                            BookGenreType = "Non-Fiction",
                            Description = "A genre of books that contains factual and real stories."
                        },
                        new
                        {
                            BookCategoryId = 3,
                            BookGenreType = "Mystery",
                            Description = "A genre of books that deals with the solution of a crime or the unraveling of secrets."
                        },
                        new
                        {
                            BookCategoryId = 4,
                            BookGenreType = "Fantasy",
                            Description = "A genre of books that contains magical or supernatural elements."
                        },
                        new
                        {
                            BookCategoryId = 5,
                            BookGenreType = "Science Fiction",
                            Description = "A genre of books that deals with imaginative and futuristic concepts."
                        },
                        new
                        {
                            BookCategoryId = 6,
                            BookGenreType = "Biography",
                            Description = "A genre of books that details the life of a real person."
                        },
                        new
                        {
                            BookCategoryId = 7,
                            BookGenreType = "Romance",
                            Description = "A genre of books that focuses on romantic relationships."
                        },
                        new
                        {
                            BookCategoryId = 8,
                            BookGenreType = "Horror",
                            Description = "A genre of books that is intended to scare or thrill the reader."
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            OrderDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 0,
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            OrderDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 3,
                            OrderDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            UserId = 3
                        },
                        new
                        {
                            OrderId = 4,
                            OrderDate = new DateTime(2023, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 0,
                            UserId = 4
                        },
                        new
                        {
                            OrderId = 5,
                            OrderDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 0,
                            UserId = 5
                        },
                        new
                        {
                            OrderId = 6,
                            OrderDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            UserId = 6
                        },
                        new
                        {
                            OrderId = 7,
                            OrderDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 1,
                            UserId = 7
                        },
                        new
                        {
                            OrderId = 8,
                            OrderDate = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 0,
                            UserId = 8
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            BookId = 1,
                            Quantity = 2,
                            UnitPrice = 19.99m
                        },
                        new
                        {
                            OrderId = 1,
                            BookId = 3,
                            Quantity = 1,
                            UnitPrice = 15.99m
                        },
                        new
                        {
                            OrderId = 2,
                            BookId = 2,
                            Quantity = 1,
                            UnitPrice = 29.99m
                        },
                        new
                        {
                            OrderId = 3,
                            BookId = 4,
                            Quantity = 1,
                            UnitPrice = 12.99m
                        },
                        new
                        {
                            OrderId = 4,
                            BookId = 5,
                            Quantity = 3,
                            UnitPrice = 18.99m
                        },
                        new
                        {
                            OrderId = 5,
                            BookId = 6,
                            Quantity = 2,
                            UnitPrice = 22.99m
                        },
                        new
                        {
                            OrderId = 6,
                            BookId = 7,
                            Quantity = 1,
                            UnitPrice = 25.99m
                        },
                        new
                        {
                            OrderId = 7,
                            BookId = 8,
                            Quantity = 1,
                            UnitPrice = 30.99m
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetailView", b =>
                {
                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable((string)null);

                    b.ToView("viewOrderDetails", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            ContactName = "John Pearson",
                            Country = "USA",
                            Email = "contact@pearson.com",
                            PhoneNumber = "123-456-7890",
                            PublisherName = "Pearson"
                        },
                        new
                        {
                            PublisherId = 2,
                            ContactName = "Jane Random",
                            Country = "UK",
                            Email = "info@penguinrandomhouse.com",
                            PhoneNumber = "987-654-3210",
                            PublisherName = "Penguin Random House"
                        },
                        new
                        {
                            PublisherId = 3,
                            ContactName = "Alice Harper",
                            Country = "USA",
                            Email = "support@harpercollins.com",
                            PhoneNumber = "555-123-4567",
                            PublisherName = "HarperCollins"
                        },
                        new
                        {
                            PublisherId = 4,
                            ContactName = "Bob Simon",
                            Country = "USA",
                            Email = "service@simonandschuster.com",
                            PhoneNumber = "555-987-6543",
                            PublisherName = "Simon & Schuster"
                        },
                        new
                        {
                            PublisherId = 5,
                            ContactName = "Carol Macmillan",
                            Country = "UK",
                            Email = "help@macmillan.com",
                            PhoneNumber = "555-654-3210",
                            PublisherName = "Macmillan"
                        },
                        new
                        {
                            PublisherId = 6,
                            ContactName = "David Hachette",
                            Country = "France",
                            Email = "info@hachette.com",
                            PhoneNumber = "555-321-9876",
                            PublisherName = "Hachette Livre"
                        },
                        new
                        {
                            PublisherId = 7,
                            ContactName = "Eva Scholastic",
                            Country = "USA",
                            Email = "contact@scholastic.com",
                            PhoneNumber = "555-789-1234",
                            PublisherName = "Scholastic"
                        },
                        new
                        {
                            PublisherId = 8,
                            ContactName = "Frank Bloomsbury",
                            Country = "UK",
                            Email = "info@bloomsbury.com",
                            PhoneNumber = "555-456-7890",
                            PublisherName = "Bloomsbury"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleDescription = "Customer role",
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleDescription = "Author role",
                            RoleName = "Author"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleDescription = "Publisher role",
                            RoleName = "Publisher"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doe@gmail.com",
                            FullName = "John Doe",
                            PasswordHash = "123123",
                            PhoneNumber = "123-456-7890",
                            RoleId = 3,
                            Status = 0
                        },
                        new
                        {
                            UserId = 2,
                            DateOfBirth = new DateTime(1990, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane@gmail.com",
                            FullName = "Jane Smith",
                            PasswordHash = "123123",
                            PhoneNumber = "987-654-3210",
                            RoleId = 1,
                            Status = 1
                        },
                        new
                        {
                            UserId = 3,
                            DateOfBirth = new DateTime(1988, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johnson@example.com",
                            FullName = "Alice Johnson",
                            PasswordHash = "123123",
                            PhoneNumber = "555-123-4567",
                            RoleId = 1,
                            Status = 0
                        },
                        new
                        {
                            UserId = 4,
                            DateOfBirth = new DateTime(1975, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob@gmail.com",
                            FullName = "Bob Brown",
                            PasswordHash = "123123",
                            PhoneNumber = "555-987-6543",
                            RoleId = 3,
                            Status = 1
                        },
                        new
                        {
                            UserId = 5,
                            DateOfBirth = new DateTime(1995, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "white@example.com",
                            FullName = "Carol White",
                            PasswordHash = "123123",
                            PhoneNumber = "555-654-3210",
                            RoleId = 2,
                            Status = 0
                        },
                        new
                        {
                            UserId = 6,
                            DateOfBirth = new DateTime(1982, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "green@example.com",
                            FullName = "David Green",
                            PasswordHash = "123",
                            PhoneNumber = "555-321-9876",
                            RoleId = 2,
                            Status = 0
                        },
                        new
                        {
                            UserId = 7,
                            DateOfBirth = new DateTime(2000, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "black@example.com",
                            FullName = "Eva Black",
                            PasswordHash = "123123",
                            PhoneNumber = "555-789-1234",
                            RoleId = 1,
                            Status = 1
                        },
                        new
                        {
                            UserId = 8,
                            DateOfBirth = new DateTime(1998, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "blue@example.com",
                            FullName = "Frank Blue",
                            PasswordHash = "123123",
                            PhoneNumber = "555-456-7890",
                            RoleId = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("BusinessObjects.Models.Book", b =>
                {
                    b.HasOne("BusinessObjects.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.BookCategory", "BookCategory")
                        .WithMany("Books")
                        .HasForeignKey("BookCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BookCategory");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.HasOne("BusinessObjects.Models.UserAccount", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.HasOne("BusinessObjects.Models.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserAccount", b =>
                {
                    b.HasOne("BusinessObjects.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObjects.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObjects.Models.Book", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObjects.Models.BookCategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObjects.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserAccount", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
